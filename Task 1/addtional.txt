=========================================
           Types of Databases
=========================================

1. Relational vs Non-Relational
-----------------------------------------
 Relational Database (RDBMS):
- Stores data in structured tables with relationships.
- Uses SQL for queries.
- Examples: MySQL, PostgreSQL, SQL Server, Oracle.

Non-Relational Database (NoSQL):
- Stores unstructured/semi-structured data (documents, key-value, graphs).
- More flexible and scalable.
- Examples: MongoDB, Cassandra, Redis, Neo4j.

 Use Cases:
- RDBMS: Banking systems, inventory management.
- NoSQL: Real-time analytics, social media apps.

=========================================

2. Centralized vs Distributed vs Cloud Databases
--------------------------------------------------

 Centralized:
- Stored on a single server or location.
- Easier to manage but limited scalability.

 Distributed:
- Data is spread across multiple nodes.
- Better for fault tolerance and global access.

 Cloud:
- Hosted on cloud platforms (e.g., Azure, AWS, GCP).
- Scalable, accessible from anywhere, automatic backups.

 Use Cases:
- Centralized: Small businesses, local apps.
- Distributed: Telecom, large-scale enterprise.
- Cloud: SaaS apps, global platforms.

=========================================
   Cloud Storage and Databases
=========================================

 What is Cloud Storage?
- Remote storage of data on cloud servers (e.g., Google Drive, AWS S3).
- Databases can use cloud storage for backups, replication, etc.

 Advantages of Cloud Databases:
- Scalability and flexibility.
- Lower maintenance.
- High availability and disaster recovery.

Disadvantages:
- Dependency on internet.
- Potential data security concerns.
- Ongoing operational costs.

 Examples: Azure SQL, Amazon RDS, Google Cloud Spanner.

=========================================
     Database Engines and Languages
=========================================

 What is a Database Engine?
- Core software that manages database storage, queries, indexing, and transactions.

 Examples:
- SQL Server > uses T-SQL.
- Oracle > uses PL/SQL.
- MySQL > uses ANSI SQL + extensions.
- PostgreSQL > uses PL/pgSQL + ANSI SQL.

 Language-Engine Relationship:
- Each engine has its native language (PL/SQL for Oracle).
- ANSI SQL is widely supported, but advanced features vary by engine.
- Some cross-compatibility exists, but syntax and features differ.

=========================================
     Can We Transfer a Database Between Engines?
=========================================

 Yes, it's possible (SQL Server > MySQL), but:

 Challenges:
- Data type mismatches.
- Differences in stored procedures, triggers, and constraints.
- SQL dialect variations.

 Considerations:
- Compatibility of functions and syntax.
- Manual adjustment of triggers and views.
- Data integrity and migration testing.

 Tools: AWS DMS, Azure Data Migration Service, third-party ETL tools.

=========================================
     Logical vs Physical Schema
=========================================

 Logical Schema:
- Describes the abstract structure: tables, fields, relationships.
- Focuses on "what" data is stored.

 Physical Schema:
- Describes the implementation details: file storage, indexes, partitions.
- Focuses on "how" data is stored.

 Why Both Matter:
- Logical design ensures data integrity and normalization.
- Physical design impacts performance and storage efficiency.

 Example: "Student" Entity

Logical Schema:
-----------------
Entity: Student
Attributes: StudentID, Name, Age, Major

Physical Schema (PostgreSQL Example):
-----------------
Table: students
Fields:
   student_id SERIAL PRIMARY KEY,
   name VARCHAR(100),
   age INT CHECK (age > 0),
   major VARCHAR(50)

=========================================
